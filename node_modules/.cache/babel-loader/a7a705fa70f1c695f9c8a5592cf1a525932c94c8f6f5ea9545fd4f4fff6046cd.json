{"ast":null,"code":"const DBVersion = 1;\nconst DBName = 'MDB';\nclass mdb {\n  constructor() {\n    this.version = DBVersion;\n  }\n  starter() {\n    let openRequest = indexedDB.open(DBName, DBVersion);\n    let res_val = false;\n    openRequest.onupgradeneeded = function (event) {\n      // срабатывает, если на клиенте нет базы данных // ...выполнить инициализацию...\n      let db = openRequest.result;\n      switch (event.oldVersion) {\n        case 0:\n          // версия 0 означает, что на клиенте нет базы данных; выполнить инициализацию\n          db.createObjectStore('counter');\n          let transaction = db.transaction(\"counter\", \"readwrite\");\n          // получить хранилище объектов для работы с ним\n          let counters = transaction.objectStore(\"counter\");\n          let counter = {\n            id: 1,\n            full: 100,\n            now: 100\n          };\n          let request = counters.add(counter);\n          request.onsuccess = function () {\n            console.log(\"Счетчик добавлен в хранилище\", request.result);\n          };\n          request.onerror = function () {\n            console.log(\"Ошибка\", request.error);\n          };\n          break;\n      }\n    };\n    openRequest.onerror = function () {\n      console.error(\"Error\", openRequest.error);\n    };\n    openRequest.onsuccess = function () {\n      let db = openRequest.result;\n      // продолжить работу с базой данных, используя объект db\n      res_val = db;\n    };\n    return res_val;\n  }\n  getDB() {\n    return [1, 2, 3];\n  }\n}\nlet MDB = new mdb();\nexport default MDB;","map":{"version":3,"names":["DBVersion","DBName","mdb","constructor","version","starter","openRequest","indexedDB","open","res_val","onupgradeneeded","event","db","result","oldVersion","createObjectStore","transaction","counters","objectStore","counter","id","full","now","request","add","onsuccess","console","log","onerror","error","getDB","MDB"],"sources":["/home/kup/my_projects/vue/kgm/src/MDB.js"],"sourcesContent":["const DBVersion = 1;\nconst DBName = 'MDB';\n\nclass mdb {\n    constructor() {\n        this.version = DBVersion\n    }\n\n    starter() {\n        let openRequest = indexedDB.open(DBName, DBVersion);\n        let res_val = false;\n        openRequest.onupgradeneeded = function(event) {\n            // срабатывает, если на клиенте нет базы данных // ...выполнить инициализацию...\n            let db = openRequest.result;\n            switch(event.oldVersion) {\n                case 0:\n                    // версия 0 означает, что на клиенте нет базы данных; выполнить инициализацию\n                    db.createObjectStore('counter');\n                    let transaction = db.transaction(\"counter\", \"readwrite\");\n                    // получить хранилище объектов для работы с ним\n                    let counters = transaction.objectStore(\"counter\");\n                    let counter = {\n                        id: 1,\n                        full: 100,\n                        now: 100\n                    };\n                    let request = counters.add(counter);\n                    \n                    request.onsuccess = function() {\n                        console.log(\"Счетчик добавлен в хранилище\", request.result);\n                    };\n                    request.onerror = function() {\n                        console.log(\"Ошибка\", request.error);\n                    };\n\n                    break;\n            }\n          };\n          \n          openRequest.onerror = function() {\n            console.error(\"Error\", openRequest.error);\n          };\n          \n          openRequest.onsuccess = function() {\n            let db = openRequest.result;\n            // продолжить работу с базой данных, используя объект db\n            res_val = db;\n          };\n        return res_val;\n    }\n\n    getDB() {\n        return [1, 2, 3];\n    }\n}\n\nlet MDB = new mdb();\n\nexport default MDB;"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC;AACnB,MAAMC,MAAM,GAAG,KAAK;AAEpB,MAAMC,GAAG,CAAC;EACNC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAGJ,SAAS;EAC5B;EAEAK,OAAOA,CAAA,EAAG;IACN,IAAIC,WAAW,GAAGC,SAAS,CAACC,IAAI,CAACP,MAAM,EAAED,SAAS,CAAC;IACnD,IAAIS,OAAO,GAAG,KAAK;IACnBH,WAAW,CAACI,eAAe,GAAG,UAASC,KAAK,EAAE;MAC1C;MACA,IAAIC,EAAE,GAAGN,WAAW,CAACO,MAAM;MAC3B,QAAOF,KAAK,CAACG,UAAU;QACnB,KAAK,CAAC;UACF;UACAF,EAAE,CAACG,iBAAiB,CAAC,SAAS,CAAC;UAC/B,IAAIC,WAAW,GAAGJ,EAAE,CAACI,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC;UACxD;UACA,IAAIC,QAAQ,GAAGD,WAAW,CAACE,WAAW,CAAC,SAAS,CAAC;UACjD,IAAIC,OAAO,GAAG;YACVC,EAAE,EAAE,CAAC;YACLC,IAAI,EAAE,GAAG;YACTC,GAAG,EAAE;UACT,CAAC;UACD,IAAIC,OAAO,GAAGN,QAAQ,CAACO,GAAG,CAACL,OAAO,CAAC;UAEnCI,OAAO,CAACE,SAAS,GAAG,YAAW;YAC3BC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEJ,OAAO,CAACV,MAAM,CAAC;UAC/D,CAAC;UACDU,OAAO,CAACK,OAAO,GAAG,YAAW;YACzBF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,OAAO,CAACM,KAAK,CAAC;UACxC,CAAC;UAED;MACR;IACF,CAAC;IAEDvB,WAAW,CAACsB,OAAO,GAAG,YAAW;MAC/BF,OAAO,CAACG,KAAK,CAAC,OAAO,EAAEvB,WAAW,CAACuB,KAAK,CAAC;IAC3C,CAAC;IAEDvB,WAAW,CAACmB,SAAS,GAAG,YAAW;MACjC,IAAIb,EAAE,GAAGN,WAAW,CAACO,MAAM;MAC3B;MACAJ,OAAO,GAAGG,EAAE;IACd,CAAC;IACH,OAAOH,OAAO;EAClB;EAEAqB,KAAKA,CAAA,EAAG;IACJ,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpB;AACJ;AAEA,IAAIC,GAAG,GAAG,IAAI7B,GAAG,CAAC,CAAC;AAEnB,eAAe6B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}