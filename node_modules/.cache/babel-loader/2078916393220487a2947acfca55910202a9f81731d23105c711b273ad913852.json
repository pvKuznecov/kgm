{"ast":null,"code":"const DBVersion = 1;\nconst DBName = 'MDB';\nclass mdb {\n  constructor() {\n    this.version = DBVersion;\n  }\n  starter() {\n    let openRequest = indexedDB.open(DBName, DBVersion);\n    console.log(\"openRequest:::\", openRequest);\n    let res_val = false;\n    openRequest.onupgradeneeded = function (event) {\n      console.log(\"openRequest.onupgradeneeded\");\n      console.log(\"event\", event);\n      // срабатывает, если на клиенте нет базы данных // ...выполнить инициализацию...\n      let db = openRequest.result;\n      if (!db.objectStoreNames.contains('counters')) {\n        // если хранилище \"counters\" не существует\n        db.createObjectStore('counters', {\n          keyPath: 'id'\n        }); // создаём хранилище\n      }\n      if (!db.objectStoreNames.contains('tablets')) {\n        db.createObjectStore('tablets', {\n          keyPath: 'id'\n        });\n      }\n\n      // switch(event.oldVersion) {\n      //     case 0:\n      //         // версия 0 означает, что на клиенте нет базы данных; выполнить инициализацию\n      //         db.createObjectStore('counters');\n      //         db.createObjectStore('tablets');\n      //         // let transaction = db.transaction(\"counter\", \"readwrite\");\n      //         // // получить хранилище объектов для работы с ним\n      //         // let counters = transaction.objectStore(\"counter\");\n      //         // let counter = {\n      //         //     id: 1,\n      //         //     full: 100,\n      //         //     now: 100\n      //         // };\n      //         // let request = counters.add(counter);\n\n      //         // request.onsuccess = function() {\n      //         //     console.log(\"Счетчик добавлен в хранилище\", request.result);\n      //         // };\n      //         // request.onerror = function() {\n      //         //     console.log(\"Ошибка\", request.error);\n      //         // };\n\n      //         // break;\n      //         this.starter;\n      // }\n    };\n    openRequest.onerror = function () {\n      console.error(\"Error\", openRequest.error);\n    };\n    openRequest.onsuccess = function () {\n      console.log(\"openRequest.onsuccess\");\n      let db = openRequest.result;\n      // продолжить работу с базой данных, используя объект db\n      res_val = db;\n    };\n    return res_val;\n  }\n  getDB() {\n    return [1, 2, 3];\n  }\n  delDB() {\n    let delRequest = indexedDB.deleteDatabase(DBName);\n    console.log(\"delRequest\");\n    delRequest.onerror = function () {\n      console.log(\"delRequest.onerror\");\n    };\n    delRequest.onsuccess = function () {\n      console.log(\"delRequest.onsuccess\");\n    };\n  }\n}\nlet MDB = new mdb();\nexport default MDB;","map":{"version":3,"names":["DBVersion","DBName","mdb","constructor","version","starter","openRequest","indexedDB","open","console","log","res_val","onupgradeneeded","event","db","result","objectStoreNames","contains","createObjectStore","keyPath","onerror","error","onsuccess","getDB","delDB","delRequest","deleteDatabase","MDB"],"sources":["/home/kup/my_projects/vue/kgm/src/MDB.js"],"sourcesContent":["const DBVersion = 1;\nconst DBName = 'MDB';\n\nclass mdb {\n    constructor() {\n        this.version = DBVersion\n    }\n\n    starter() {\n        let openRequest = indexedDB.open(DBName, DBVersion);\n        console.log(\"openRequest:::\", openRequest);\n        let res_val = false;\n        openRequest.onupgradeneeded = function(event) {\n            console.log(\"openRequest.onupgradeneeded\");\n            console.log(\"event\", event);\n            // срабатывает, если на клиенте нет базы данных // ...выполнить инициализацию...\n            let db = openRequest.result;\n            if (!db.objectStoreNames.contains('counters')) { // если хранилище \"counters\" не существует\n                db.createObjectStore('counters', {keyPath: 'id'}); // создаём хранилище\n            }\n            if (!db.objectStoreNames.contains('tablets')) {\n                db.createObjectStore('tablets', {keyPath: 'id'});\n            }\n\n            // switch(event.oldVersion) {\n            //     case 0:\n            //         // версия 0 означает, что на клиенте нет базы данных; выполнить инициализацию\n            //         db.createObjectStore('counters');\n            //         db.createObjectStore('tablets');\n            //         // let transaction = db.transaction(\"counter\", \"readwrite\");\n            //         // // получить хранилище объектов для работы с ним\n            //         // let counters = transaction.objectStore(\"counter\");\n            //         // let counter = {\n            //         //     id: 1,\n            //         //     full: 100,\n            //         //     now: 100\n            //         // };\n            //         // let request = counters.add(counter);\n                    \n            //         // request.onsuccess = function() {\n            //         //     console.log(\"Счетчик добавлен в хранилище\", request.result);\n            //         // };\n            //         // request.onerror = function() {\n            //         //     console.log(\"Ошибка\", request.error);\n            //         // };\n\n            //         // break;\n            //         this.starter;\n            // }\n        };\n          \n        openRequest.onerror = function() {\n            console.error(\"Error\", openRequest.error);\n        };\n          \n        openRequest.onsuccess = function() {\n            console.log(\"openRequest.onsuccess\");\n            let db = openRequest.result;\n            // продолжить работу с базой данных, используя объект db\n            res_val = db;\n        };\n        \n        return res_val;\n    }\n\n    getDB() {\n        return [1, 2, 3];\n    }\n\n    delDB() {\n        let delRequest = indexedDB.deleteDatabase(DBName);\n        console.log(\"delRequest\");\n        \n        delRequest.onerror = function() {\n            console.log(\"delRequest.onerror\");\n        };\n\n        delRequest.onsuccess = function() {\n            console.log(\"delRequest.onsuccess\");\n        };\n    }\n}\n\nlet MDB = new mdb();\n\nexport default MDB;"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC;AACnB,MAAMC,MAAM,GAAG,KAAK;AAEpB,MAAMC,GAAG,CAAC;EACNC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAGJ,SAAS;EAC5B;EAEAK,OAAOA,CAAA,EAAG;IACN,IAAIC,WAAW,GAAGC,SAAS,CAACC,IAAI,CAACP,MAAM,EAAED,SAAS,CAAC;IACnDS,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,WAAW,CAAC;IAC1C,IAAIK,OAAO,GAAG,KAAK;IACnBL,WAAW,CAACM,eAAe,GAAG,UAASC,KAAK,EAAE;MAC1CJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEG,KAAK,CAAC;MAC3B;MACA,IAAIC,EAAE,GAAGR,WAAW,CAACS,MAAM;MAC3B,IAAI,CAACD,EAAE,CAACE,gBAAgB,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;QAAE;QAC7CH,EAAE,CAACI,iBAAiB,CAAC,UAAU,EAAE;UAACC,OAAO,EAAE;QAAI,CAAC,CAAC,CAAC,CAAC;MACvD;MACA,IAAI,CAACL,EAAE,CAACE,gBAAgB,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC1CH,EAAE,CAACI,iBAAiB,CAAC,SAAS,EAAE;UAACC,OAAO,EAAE;QAAI,CAAC,CAAC;MACpD;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACJ,CAAC;IAEDb,WAAW,CAACc,OAAO,GAAG,YAAW;MAC7BX,OAAO,CAACY,KAAK,CAAC,OAAO,EAAEf,WAAW,CAACe,KAAK,CAAC;IAC7C,CAAC;IAEDf,WAAW,CAACgB,SAAS,GAAG,YAAW;MAC/Bb,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,IAAII,EAAE,GAAGR,WAAW,CAACS,MAAM;MAC3B;MACAJ,OAAO,GAAGG,EAAE;IAChB,CAAC;IAED,OAAOH,OAAO;EAClB;EAEAY,KAAKA,CAAA,EAAG;IACJ,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpB;EAEAC,KAAKA,CAAA,EAAG;IACJ,IAAIC,UAAU,GAAGlB,SAAS,CAACmB,cAAc,CAACzB,MAAM,CAAC;IACjDQ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IAEzBe,UAAU,CAACL,OAAO,GAAG,YAAW;MAC5BX,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAEDe,UAAU,CAACH,SAAS,GAAG,YAAW;MAC9Bb,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACvC,CAAC;EACL;AACJ;AAEA,IAAIiB,GAAG,GAAG,IAAIzB,GAAG,CAAC,CAAC;AAEnB,eAAeyB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}