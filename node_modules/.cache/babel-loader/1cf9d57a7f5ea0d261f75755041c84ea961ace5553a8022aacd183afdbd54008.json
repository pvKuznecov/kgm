{"ast":null,"code":"const DBVersion = 1;\nconst DBName = 'MDB';\nclass mdb {\n  constructor() {\n    this.version = DBVersion;\n  }\n  starter() {\n    let openRequest = indexedDB.open(DBName, DBVersion);\n    console.log(\"openRequest:::\", openRequest);\n    let res_val = false;\n    openRequest.onupgradeneeded = function (event) {\n      console.log(\"openRequest.onupgradeneeded\");\n      // срабатывает, если на клиенте нет базы данных // ...выполнить инициализацию...\n      let db = openRequest.result;\n      switch (event.oldVersion) {\n        case 0:\n          // версия 0 означает, что на клиенте нет базы данных; выполнить инициализацию\n          db.createObjectStore('counter');\n          db.createObjectStore('tablets');\n          // let transaction = db.transaction(\"counter\", \"readwrite\");\n          // // получить хранилище объектов для работы с ним\n          // let counters = transaction.objectStore(\"counter\");\n          // let counter = {\n          //     id: 1,\n          //     full: 100,\n          //     now: 100\n          // };\n          // let request = counters.add(counter);\n\n          // request.onsuccess = function() {\n          //     console.log(\"Счетчик добавлен в хранилище\", request.result);\n          // };\n          // request.onerror = function() {\n          //     console.log(\"Ошибка\", request.error);\n          // };\n\n          // break;\n          this.starter;\n      }\n    };\n    openRequest.onerror = function () {\n      console.error(\"Error\", openRequest.error);\n    };\n    openRequest.onsuccess = function () {\n      console.log(\"openRequest.onsuccess\");\n      let db = openRequest.result;\n      // продолжить работу с базой данных, используя объект db\n      res_val = db;\n    };\n    return res_val;\n  }\n  getDB() {\n    return [1, 2, 3];\n  }\n  delDB() {\n    let delRequest = indexedDB.deleteDatabase(DBName);\n    console.log(\"delRequest\");\n    delRequest.onerror = function () {\n      console.log(\"delRequest.onerror\");\n    };\n    delRequest.onsuccess = function () {\n      console.log(\"delRequest.onsuccess\");\n    };\n  }\n}\nlet MDB = new mdb();\nexport default MDB;","map":{"version":3,"names":["DBVersion","DBName","mdb","constructor","version","starter","openRequest","indexedDB","open","console","log","res_val","onupgradeneeded","event","db","result","oldVersion","createObjectStore","onerror","error","onsuccess","getDB","delDB","delRequest","deleteDatabase","MDB"],"sources":["/home/kup/my_projects/vue/kgm/src/MDB.js"],"sourcesContent":["const DBVersion = 1;\nconst DBName = 'MDB';\n\nclass mdb {\n    constructor() {\n        this.version = DBVersion\n    }\n\n    starter() {\n        let openRequest = indexedDB.open(DBName, DBVersion);\n        console.log(\"openRequest:::\", openRequest);\n        let res_val = false;\n        openRequest.onupgradeneeded = function(event) {\n            console.log(\"openRequest.onupgradeneeded\");\n            // срабатывает, если на клиенте нет базы данных // ...выполнить инициализацию...\n            let db = openRequest.result;\n            switch(event.oldVersion) {\n                case 0:\n                    // версия 0 означает, что на клиенте нет базы данных; выполнить инициализацию\n                    db.createObjectStore('counter');\n                    db.createObjectStore('tablets');\n                    // let transaction = db.transaction(\"counter\", \"readwrite\");\n                    // // получить хранилище объектов для работы с ним\n                    // let counters = transaction.objectStore(\"counter\");\n                    // let counter = {\n                    //     id: 1,\n                    //     full: 100,\n                    //     now: 100\n                    // };\n                    // let request = counters.add(counter);\n                    \n                    // request.onsuccess = function() {\n                    //     console.log(\"Счетчик добавлен в хранилище\", request.result);\n                    // };\n                    // request.onerror = function() {\n                    //     console.log(\"Ошибка\", request.error);\n                    // };\n\n                    // break;\n                    this.starter;\n            }\n        };\n          \n        openRequest.onerror = function() {\n            console.error(\"Error\", openRequest.error);\n        };\n          \n        openRequest.onsuccess = function() {\n            console.log(\"openRequest.onsuccess\");\n            let db = openRequest.result;\n            // продолжить работу с базой данных, используя объект db\n            res_val = db;\n        };\n        \n        return res_val;\n    }\n\n    getDB() {\n        return [1, 2, 3];\n    }\n\n    delDB() {\n        let delRequest = indexedDB.deleteDatabase(DBName);\n        console.log(\"delRequest\");\n        \n        delRequest.onerror = function() {\n            console.log(\"delRequest.onerror\");\n        };\n\n        delRequest.onsuccess = function() {\n            console.log(\"delRequest.onsuccess\");\n        };\n    }\n}\n\nlet MDB = new mdb();\n\nexport default MDB;"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC;AACnB,MAAMC,MAAM,GAAG,KAAK;AAEpB,MAAMC,GAAG,CAAC;EACNC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAGJ,SAAS;EAC5B;EAEAK,OAAOA,CAAA,EAAG;IACN,IAAIC,WAAW,GAAGC,SAAS,CAACC,IAAI,CAACP,MAAM,EAAED,SAAS,CAAC;IACnDS,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,WAAW,CAAC;IAC1C,IAAIK,OAAO,GAAG,KAAK;IACnBL,WAAW,CAACM,eAAe,GAAG,UAASC,KAAK,EAAE;MAC1CJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C;MACA,IAAII,EAAE,GAAGR,WAAW,CAACS,MAAM;MAC3B,QAAOF,KAAK,CAACG,UAAU;QACnB,KAAK,CAAC;UACF;UACAF,EAAE,CAACG,iBAAiB,CAAC,SAAS,CAAC;UAC/BH,EAAE,CAACG,iBAAiB,CAAC,SAAS,CAAC;UAC/B;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA,IAAI,CAACZ,OAAO;MACpB;IACJ,CAAC;IAEDC,WAAW,CAACY,OAAO,GAAG,YAAW;MAC7BT,OAAO,CAACU,KAAK,CAAC,OAAO,EAAEb,WAAW,CAACa,KAAK,CAAC;IAC7C,CAAC;IAEDb,WAAW,CAACc,SAAS,GAAG,YAAW;MAC/BX,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,IAAII,EAAE,GAAGR,WAAW,CAACS,MAAM;MAC3B;MACAJ,OAAO,GAAGG,EAAE;IAChB,CAAC;IAED,OAAOH,OAAO;EAClB;EAEAU,KAAKA,CAAA,EAAG;IACJ,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpB;EAEAC,KAAKA,CAAA,EAAG;IACJ,IAAIC,UAAU,GAAGhB,SAAS,CAACiB,cAAc,CAACvB,MAAM,CAAC;IACjDQ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IAEzBa,UAAU,CAACL,OAAO,GAAG,YAAW;MAC5BT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAEDa,UAAU,CAACH,SAAS,GAAG,YAAW;MAC9BX,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACvC,CAAC;EACL;AACJ;AAEA,IAAIe,GAAG,GAAG,IAAIvB,GAAG,CAAC,CAAC;AAEnB,eAAeuB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}