{"ast":null,"code":"let MDB = {};\nlet openRequest = indexedDB.open('MDB', 1);\n\n// Удалить базу данных:\n// let deleteRequest = indexedDB.deleteDatabase('MDB');\n// deleteRequest.onsuccess/onerror /*отслеживает результат*/\n\nopenRequest.onupgradeneeded = function (event) {\n  // версия существующей базы данных меньше 2 (или база данных не существует)\n  MDB = openRequest.result;\n  console.log('event', event);\n  switch (event.oldVersion) {\n    // существующая (старая) версия базы данных\n    case 0:\n      // версия 0 означает, что на клиенте нет базы данных\n      // выполнить инициализацию\n      MDB.createObjectStore('counter');\n      let transaction = MDB.transaction(\"counter\", \"readwrite\");\n      // получить хранилище объектов для работы с ним\n      let counters = transaction.objectStore(\"counter\");\n      let counter = {\n        id: 1,\n        full: 100,\n        now: 100\n      };\n      let request = counters.add(counter);\n      request.onsuccess = function () {\n        console.log(\"Счетчик добавлен в хранилище\", request.result);\n      };\n      request.onerror = function () {\n        console.log(\"Ошибка\", request.error);\n      };\n      break;\n    // case 1:\n    //     // на клиенте версия базы данных 1\n    //     // обновить\n  }\n};\nopenRequest.onerror = function () {\n  console.error(\"Error\", openRequest.error);\n};\nopenRequest.onsuccess = function () {\n  MDB = openRequest.result;\n  MDB.onversionchange = function () {\n    MDB.close();\n    alert(\"База данных устарела, пожалуйста, перезагрузите страницу.\");\n  };\n\n  // продолжить работу с базой данных, используя объект db\n  console.log('MDB', MDB);\n};\nopenRequest.onblocked = function () {\n  // это событие не должно срабатывать, если мы правильно обрабатываем onversionchange\n\n  // это означает, что есть ещё одно открытое соединение с той же базой данных\n  // и он не был закрыт после того, как для него сработал db.onversionchange\n};\nexport default MDB;","map":{"version":3,"names":["MDB","openRequest","indexedDB","open","onupgradeneeded","event","result","console","log","oldVersion","createObjectStore","transaction","counters","objectStore","counter","id","full","now","request","add","onsuccess","onerror","error","onversionchange","close","alert","onblocked"],"sources":["/home/kup/my_projects/vue/kgm/src/MDB.js"],"sourcesContent":["let MDB = {};\nlet openRequest = indexedDB.open('MDB', 1);\n\n// Удалить базу данных:\n// let deleteRequest = indexedDB.deleteDatabase('MDB');\n// deleteRequest.onsuccess/onerror /*отслеживает результат*/\n\nopenRequest.onupgradeneeded = function(event) {\n    // версия существующей базы данных меньше 2 (или база данных не существует)\n    MDB = openRequest.result;\n    console.log('event', event);\n    switch(event.oldVersion) { // существующая (старая) версия базы данных\n        case 0:\n            // версия 0 означает, что на клиенте нет базы данных\n            // выполнить инициализацию\n            MDB.createObjectStore('counter');\n\n            let transaction = MDB.transaction(\"counter\", \"readwrite\");\n            // получить хранилище объектов для работы с ним\n            let counters = transaction.objectStore(\"counter\");\n            let counter = {\n                id: 1,\n                full: 100,\n                now: 100\n            };\n\n            let request = counters.add(counter);\n            request.onsuccess = function() {\n                console.log(\"Счетчик добавлен в хранилище\", request.result);\n            };\n\n            request.onerror = function() {\n                console.log(\"Ошибка\", request.error);\n            };\n\n            break;\n        // case 1:\n        //     // на клиенте версия базы данных 1\n        //     // обновить\n    }\n};\n\nopenRequest.onerror = function() {\n    console.error(\"Error\", openRequest.error);\n};\n  \nopenRequest.onsuccess = function() {\n    MDB = openRequest.result;\n    \n    MDB.onversionchange = function() {\n        MDB.close();\n        alert(\"База данных устарела, пожалуйста, перезагрузите страницу.\")\n    };\n    \n    // продолжить работу с базой данных, используя объект db\n    console.log('MDB', MDB);\n};\n\nopenRequest.onblocked = function() {\n    // это событие не должно срабатывать, если мы правильно обрабатываем onversionchange\n  \n    // это означает, что есть ещё одно открытое соединение с той же базой данных\n    // и он не был закрыт после того, как для него сработал db.onversionchange\n};\n\n\nexport default MDB;"],"mappings":"AAAA,IAAIA,GAAG,GAAG,CAAC,CAAC;AACZ,IAAIC,WAAW,GAAGC,SAAS,CAACC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;AAE1C;AACA;AACA;;AAEAF,WAAW,CAACG,eAAe,GAAG,UAASC,KAAK,EAAE;EAC1C;EACAL,GAAG,GAAGC,WAAW,CAACK,MAAM;EACxBC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,KAAK,CAAC;EAC3B,QAAOA,KAAK,CAACI,UAAU;IAAI;IACvB,KAAK,CAAC;MACF;MACA;MACAT,GAAG,CAACU,iBAAiB,CAAC,SAAS,CAAC;MAEhC,IAAIC,WAAW,GAAGX,GAAG,CAACW,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC;MACzD;MACA,IAAIC,QAAQ,GAAGD,WAAW,CAACE,WAAW,CAAC,SAAS,CAAC;MACjD,IAAIC,OAAO,GAAG;QACVC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,GAAG;QACTC,GAAG,EAAE;MACT,CAAC;MAED,IAAIC,OAAO,GAAGN,QAAQ,CAACO,GAAG,CAACL,OAAO,CAAC;MACnCI,OAAO,CAACE,SAAS,GAAG,YAAW;QAC3Bb,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEU,OAAO,CAACZ,MAAM,CAAC;MAC/D,CAAC;MAEDY,OAAO,CAACG,OAAO,GAAG,YAAW;QACzBd,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEU,OAAO,CAACI,KAAK,CAAC;MACxC,CAAC;MAED;IACJ;IACA;IACA;EACJ;AACJ,CAAC;AAEDrB,WAAW,CAACoB,OAAO,GAAG,YAAW;EAC7Bd,OAAO,CAACe,KAAK,CAAC,OAAO,EAAErB,WAAW,CAACqB,KAAK,CAAC;AAC7C,CAAC;AAEDrB,WAAW,CAACmB,SAAS,GAAG,YAAW;EAC/BpB,GAAG,GAAGC,WAAW,CAACK,MAAM;EAExBN,GAAG,CAACuB,eAAe,GAAG,YAAW;IAC7BvB,GAAG,CAACwB,KAAK,CAAC,CAAC;IACXC,KAAK,CAAC,2DAA2D,CAAC;EACtE,CAAC;;EAED;EACAlB,OAAO,CAACC,GAAG,CAAC,KAAK,EAAER,GAAG,CAAC;AAC3B,CAAC;AAEDC,WAAW,CAACyB,SAAS,GAAG,YAAW;EAC/B;;EAEA;EACA;AAAA,CACH;AAGD,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}